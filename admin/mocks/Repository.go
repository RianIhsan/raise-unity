// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	campaign "github.com/RianIhsan/raise-unity/campaign"
	mock "github.com/stretchr/testify/mock"

	transaction "github.com/RianIhsan/raise-unity/transaction"

	user "github.com/RianIhsan/raise-unity/user"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetCampaignById provides a mock function with given fields: campaignId
func (_m *Repository) GetCampaignById(campaignId int) (campaign.Campaign, error) {
	ret := _m.Called(campaignId)

	var r0 campaign.Campaign
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (campaign.Campaign, error)); ok {
		return rf(campaignId)
	}
	if rf, ok := ret.Get(0).(func(int) campaign.Campaign); ok {
		r0 = rf(campaignId)
	} else {
		r0 = ret.Get(0).(campaign.Campaign)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(campaignId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaginatedTransactions provides a mock function with given fields: offset, limit
func (_m *Repository) GetPaginatedTransactions(offset int, limit int) ([]transaction.Transaction, error) {
	ret := _m.Called(offset, limit)

	var r0 []transaction.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]transaction.Transaction, error)); ok {
		return rf(offset, limit)
	}
	if rf, ok := ret.Get(0).(func(int, int) []transaction.Transaction); ok {
		r0 = rf(offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transaction.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaginatedUsers provides a mock function with given fields: offset, limit
func (_m *Repository) GetPaginatedUsers(offset int, limit int) ([]user.User, error) {
	ret := _m.Called(offset, limit)

	var r0 []user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]user.User, error)); ok {
		return rf(offset, limit)
	}
	if rf, ok := ret.Get(0).(func(int, int) []user.User); ok {
		r0 = rf(offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalTransactions provides a mock function with given fields:
func (_m *Repository) GetTotalTransactions() (int64, error) {
	ret := _m.Called()

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalTransactionsByUsername provides a mock function with given fields: name
func (_m *Repository) GetTotalTransactionsByUsername(name string) (int64, error) {
	ret := _m.Called(name)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int64, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalUsers provides a mock function with given fields:
func (_m *Repository) GetTotalUsers() (int64, error) {
	ret := _m.Called()

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserById provides a mock function with given fields: userId
func (_m *Repository) GetUserById(userId int) (user.User, error) {
	ret := _m.Called(userId)

	var r0 user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (user.User, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(int) user.User); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchTransactionByUsername provides a mock function with given fields: name
func (_m *Repository) SearchTransactionByUsername(name string) ([]transaction.Transaction, error) {
	ret := _m.Called(name)

	var r0 []transaction.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]transaction.Transaction, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) []transaction.Transaction); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transaction.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchUserByName provides a mock function with given fields: name
func (_m *Repository) SearchUserByName(name string) ([]user.User, error) {
	ret := _m.Called(name)

	var r0 []user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]user.User, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) []user.User); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
