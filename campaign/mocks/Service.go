// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	campaign "github.com/RianIhsan/raise-unity/campaign"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateCampaign provides a mock function with given fields: input
func (_m *Service) CreateCampaign(input campaign.CreateCampaignInput) (campaign.Campaign, error) {
	ret := _m.Called(input)

	var r0 campaign.Campaign
	var r1 error
	if rf, ok := ret.Get(0).(func(campaign.CreateCampaignInput) (campaign.Campaign, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(campaign.CreateCampaignInput) campaign.Campaign); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(campaign.Campaign)
	}

	if rf, ok := ret.Get(1).(func(campaign.CreateCampaignInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindCampaignByID provides a mock function with given fields: input
func (_m *Service) FindCampaignByID(input campaign.GetCampaignDetailInput) (campaign.Campaign, error) {
	ret := _m.Called(input)

	var r0 campaign.Campaign
	var r1 error
	if rf, ok := ret.Get(0).(func(campaign.GetCampaignDetailInput) (campaign.Campaign, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(campaign.GetCampaignDetailInput) campaign.Campaign); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(campaign.Campaign)
	}

	if rf, ok := ret.Get(1).(func(campaign.GetCampaignDetailInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindCampaigns provides a mock function with given fields: userID
func (_m *Service) FindCampaigns(userID int) ([]campaign.Campaign, error) {
	ret := _m.Called(userID)

	var r0 []campaign.Campaign
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]campaign.Campaign, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) []campaign.Campaign); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]campaign.Campaign)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaginatedCampaigns provides a mock function with given fields: page, pageSize
func (_m *Service) GetPaginatedCampaigns(page int, pageSize int) ([]campaign.Campaign, int, int, int, int, error) {
	ret := _m.Called(page, pageSize)

	var r0 []campaign.Campaign
	var r1 int
	var r2 int
	var r3 int
	var r4 int
	var r5 error
	if rf, ok := ret.Get(0).(func(int, int) ([]campaign.Campaign, int, int, int, int, error)); ok {
		return rf(page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(int, int) []campaign.Campaign); ok {
		r0 = rf(page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]campaign.Campaign)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) int); ok {
		r1 = rf(page, pageSize)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(int, int) int); ok {
		r2 = rf(page, pageSize)
	} else {
		r2 = ret.Get(2).(int)
	}

	if rf, ok := ret.Get(3).(func(int, int) int); ok {
		r3 = rf(page, pageSize)
	} else {
		r3 = ret.Get(3).(int)
	}

	if rf, ok := ret.Get(4).(func(int, int) int); ok {
		r4 = rf(page, pageSize)
	} else {
		r4 = ret.Get(4).(int)
	}

	if rf, ok := ret.Get(5).(func(int, int) error); ok {
		r5 = rf(page, pageSize)
	} else {
		r5 = ret.Error(5)
	}

	return r0, r1, r2, r3, r4, r5
}

// GetPaginatedCampaignsByUserID provides a mock function with given fields: userID, page, pageSize
func (_m *Service) GetPaginatedCampaignsByUserID(userID int, page int, pageSize int) ([]campaign.Campaign, int, int, int, int, error) {
	ret := _m.Called(userID, page, pageSize)

	var r0 []campaign.Campaign
	var r1 int
	var r2 int
	var r3 int
	var r4 int
	var r5 error
	if rf, ok := ret.Get(0).(func(int, int, int) ([]campaign.Campaign, int, int, int, int, error)); ok {
		return rf(userID, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(int, int, int) []campaign.Campaign); ok {
		r0 = rf(userID, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]campaign.Campaign)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, int) int); ok {
		r1 = rf(userID, page, pageSize)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(int, int, int) int); ok {
		r2 = rf(userID, page, pageSize)
	} else {
		r2 = ret.Get(2).(int)
	}

	if rf, ok := ret.Get(3).(func(int, int, int) int); ok {
		r3 = rf(userID, page, pageSize)
	} else {
		r3 = ret.Get(3).(int)
	}

	if rf, ok := ret.Get(4).(func(int, int, int) int); ok {
		r4 = rf(userID, page, pageSize)
	} else {
		r4 = ret.Get(4).(int)
	}

	if rf, ok := ret.Get(5).(func(int, int, int) error); ok {
		r5 = rf(userID, page, pageSize)
	} else {
		r5 = ret.Error(5)
	}

	return r0, r1, r2, r3, r4, r5
}

// SaveCampaignImage provides a mock function with given fields: input, file
func (_m *Service) SaveCampaignImage(input campaign.CreateCampaignImageInput, file string) (campaign.CampaignImage, error) {
	ret := _m.Called(input, file)

	var r0 campaign.CampaignImage
	var r1 error
	if rf, ok := ret.Get(0).(func(campaign.CreateCampaignImageInput, string) (campaign.CampaignImage, error)); ok {
		return rf(input, file)
	}
	if rf, ok := ret.Get(0).(func(campaign.CreateCampaignImageInput, string) campaign.CampaignImage); ok {
		r0 = rf(input, file)
	} else {
		r0 = ret.Get(0).(campaign.CampaignImage)
	}

	if rf, ok := ret.Get(1).(func(campaign.CreateCampaignImageInput, string) error); ok {
		r1 = rf(input, file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchCampaignsByName provides a mock function with given fields: name
func (_m *Service) SearchCampaignsByName(name string) ([]campaign.Campaign, error) {
	ret := _m.Called(name)

	var r0 []campaign.Campaign
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]campaign.Campaign, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) []campaign.Campaign); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]campaign.Campaign)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCampaign provides a mock function with given fields: inputID, data
func (_m *Service) UpdateCampaign(inputID campaign.GetCampaignDetailInput, data campaign.CreateCampaignInput) (campaign.Campaign, error) {
	ret := _m.Called(inputID, data)

	var r0 campaign.Campaign
	var r1 error
	if rf, ok := ret.Get(0).(func(campaign.GetCampaignDetailInput, campaign.CreateCampaignInput) (campaign.Campaign, error)); ok {
		return rf(inputID, data)
	}
	if rf, ok := ret.Get(0).(func(campaign.GetCampaignDetailInput, campaign.CreateCampaignInput) campaign.Campaign); ok {
		r0 = rf(inputID, data)
	} else {
		r0 = ret.Get(0).(campaign.Campaign)
	}

	if rf, ok := ret.Get(1).(func(campaign.GetCampaignDetailInput, campaign.CreateCampaignInput) error); ok {
		r1 = rf(inputID, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
