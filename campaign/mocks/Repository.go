// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	campaign "github.com/RianIhsan/raise-unity/campaign"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateImage provides a mock function with given fields: campaignImage
func (_m *Repository) CreateImage(campaignImage campaign.CampaignImage) (campaign.CampaignImage, error) {
	ret := _m.Called(campaignImage)

	var r0 campaign.CampaignImage
	var r1 error
	if rf, ok := ret.Get(0).(func(campaign.CampaignImage) (campaign.CampaignImage, error)); ok {
		return rf(campaignImage)
	}
	if rf, ok := ret.Get(0).(func(campaign.CampaignImage) campaign.CampaignImage); ok {
		r0 = rf(campaignImage)
	} else {
		r0 = ret.Get(0).(campaign.CampaignImage)
	}

	if rf, ok := ret.Get(1).(func(campaign.CampaignImage) error); ok {
		r1 = rf(campaignImage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields:
func (_m *Repository) FindAll() ([]campaign.Campaign, error) {
	ret := _m.Called()

	var r0 []campaign.Campaign
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]campaign.Campaign, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []campaign.Campaign); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]campaign.Campaign)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ID
func (_m *Repository) FindByID(ID int) (campaign.Campaign, error) {
	ret := _m.Called(ID)

	var r0 campaign.Campaign
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (campaign.Campaign, error)); ok {
		return rf(ID)
	}
	if rf, ok := ret.Get(0).(func(int) campaign.Campaign); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Get(0).(campaign.Campaign)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserID provides a mock function with given fields: userID
func (_m *Repository) FindByUserID(userID int) ([]campaign.Campaign, error) {
	ret := _m.Called(userID)

	var r0 []campaign.Campaign
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]campaign.Campaign, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) []campaign.Campaign); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]campaign.Campaign)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaginatedCampaigns provides a mock function with given fields: offset, limit
func (_m *Repository) GetPaginatedCampaigns(offset int, limit int) ([]campaign.Campaign, error) {
	ret := _m.Called(offset, limit)

	var r0 []campaign.Campaign
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]campaign.Campaign, error)); ok {
		return rf(offset, limit)
	}
	if rf, ok := ret.Get(0).(func(int, int) []campaign.Campaign); ok {
		r0 = rf(offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]campaign.Campaign)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaginatedCampaignsByUserID provides a mock function with given fields: userID, offset, limit
func (_m *Repository) GetPaginatedCampaignsByUserID(userID int, offset int, limit int) ([]campaign.Campaign, error) {
	ret := _m.Called(userID, offset, limit)

	var r0 []campaign.Campaign
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, int) ([]campaign.Campaign, error)); ok {
		return rf(userID, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(int, int, int) []campaign.Campaign); ok {
		r0 = rf(userID, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]campaign.Campaign)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, int) error); ok {
		r1 = rf(userID, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalCampaigns provides a mock function with given fields:
func (_m *Repository) GetTotalCampaigns() (int64, error) {
	ret := _m.Called()

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalCampaignsByUserID provides a mock function with given fields: userID
func (_m *Repository) GetTotalCampaignsByUserID(userID int) (int64, error) {
	ret := _m.Called(userID)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (int64, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) int64); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarkAllImagesAsNonPrimary provides a mock function with given fields: campaignID
func (_m *Repository) MarkAllImagesAsNonPrimary(campaignID int) (bool, error) {
	ret := _m.Called(campaignID)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (bool, error)); ok {
		return rf(campaignID)
	}
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(campaignID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(campaignID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: _a0
func (_m *Repository) Save(_a0 campaign.Campaign) (campaign.Campaign, error) {
	ret := _m.Called(_a0)

	var r0 campaign.Campaign
	var r1 error
	if rf, ok := ret.Get(0).(func(campaign.Campaign) (campaign.Campaign, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(campaign.Campaign) campaign.Campaign); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(campaign.Campaign)
	}

	if rf, ok := ret.Get(1).(func(campaign.Campaign) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchCampaignsByName provides a mock function with given fields: name
func (_m *Repository) SearchCampaignsByName(name string) ([]campaign.Campaign, error) {
	ret := _m.Called(name)

	var r0 []campaign.Campaign
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]campaign.Campaign, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) []campaign.Campaign); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]campaign.Campaign)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *Repository) Update(_a0 campaign.Campaign) (campaign.Campaign, error) {
	ret := _m.Called(_a0)

	var r0 campaign.Campaign
	var r1 error
	if rf, ok := ret.Get(0).(func(campaign.Campaign) (campaign.Campaign, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(campaign.Campaign) campaign.Campaign); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(campaign.Campaign)
	}

	if rf, ok := ret.Get(1).(func(campaign.Campaign) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
