// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	user "github.com/RianIhsan/raise-unity/user"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// DeleteOTP provides a mock function with given fields: otp
func (_m *Repository) DeleteOTP(otp user.OTP) error {
	ret := _m.Called(otp)

	var r0 error
	if rf, ok := ret.Get(0).(func(user.OTP) error); ok {
		r0 = rf(otp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserOTP provides a mock function with given fields: userID
func (_m *Repository) DeleteUserOTP(userID int) error {
	ret := _m.Called(userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExistingUser provides a mock function with given fields: email
func (_m *Repository) ExistingUser(email string) error {
	ret := _m.Called(email)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByEmail provides a mock function with given fields: email
func (_m *Repository) FindByEmail(email string) (user.User, error) {
	ret := _m.Called(email)

	var r0 user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (user.User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) user.User); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ID
func (_m *Repository) FindByID(ID int) (user.User, error) {
	ret := _m.Called(ID)

	var r0 user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (user.User, error)); ok {
		return rf(ID)
	}
	if rf, ok := ret.Get(0).(func(int) user.User); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindValidOTP provides a mock function with given fields: userID, otp
func (_m *Repository) FindValidOTP(userID int, otp string) (user.OTP, error) {
	ret := _m.Called(userID, otp)

	var r0 user.OTP
	var r1 error
	if rf, ok := ret.Get(0).(func(int, string) (user.OTP, error)); ok {
		return rf(userID, otp)
	}
	if rf, ok := ret.Get(0).(func(int, string) user.OTP); ok {
		r0 = rf(userID, otp)
	} else {
		r0 = ret.Get(0).(user.OTP)
	}

	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(userID, otp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: _a0
func (_m *Repository) Save(_a0 user.User) (user.User, error) {
	ret := _m.Called(_a0)

	var r0 user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(user.User) (user.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(user.User) user.User); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(user.User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveOTP provides a mock function with given fields: otp
func (_m *Repository) SaveOTP(otp user.OTP) (user.OTP, error) {
	ret := _m.Called(otp)

	var r0 user.OTP
	var r1 error
	if rf, ok := ret.Get(0).(func(user.OTP) (user.OTP, error)); ok {
		return rf(otp)
	}
	if rf, ok := ret.Get(0).(func(user.OTP) user.OTP); ok {
		r0 = rf(otp)
	} else {
		r0 = ret.Get(0).(user.OTP)
	}

	if rf, ok := ret.Get(1).(func(user.OTP) error); ok {
		r1 = rf(otp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *Repository) Update(_a0 user.User) (user.User, error) {
	ret := _m.Called(_a0)

	var r0 user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(user.User) (user.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(user.User) user.User); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(user.User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: _a0
func (_m *Repository) UpdateUser(_a0 user.User) (user.User, error) {
	ret := _m.Called(_a0)

	var r0 user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(user.User) (user.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(user.User) user.User); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(user.User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
