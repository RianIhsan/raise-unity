// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	transaction "github.com/RianIhsan/raise-unity/transaction"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetByCampaignID provides a mock function with given fields: campaignID
func (_m *Repository) GetByCampaignID(campaignID int) ([]transaction.Transaction, error) {
	ret := _m.Called(campaignID)

	var r0 []transaction.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]transaction.Transaction, error)); ok {
		return rf(campaignID)
	}
	if rf, ok := ret.Get(0).(func(int) []transaction.Transaction); ok {
		r0 = rf(campaignID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transaction.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(campaignID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByCode provides a mock function with given fields: Code
func (_m *Repository) GetByCode(Code string) (transaction.Transaction, error) {
	ret := _m.Called(Code)

	var r0 transaction.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (transaction.Transaction, error)); ok {
		return rf(Code)
	}
	if rf, ok := ret.Get(0).(func(string) transaction.Transaction); ok {
		r0 = rf(Code)
	} else {
		r0 = ret.Get(0).(transaction.Transaction)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(Code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserID provides a mock function with given fields: userID
func (_m *Repository) GetByUserID(userID int) ([]transaction.Transaction, error) {
	ret := _m.Called(userID)

	var r0 []transaction.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]transaction.Transaction, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) []transaction.Transaction); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transaction.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: _a0
func (_m *Repository) Save(_a0 transaction.Transaction) (transaction.Transaction, error) {
	ret := _m.Called(_a0)

	var r0 transaction.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(transaction.Transaction) (transaction.Transaction, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(transaction.Transaction) transaction.Transaction); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(transaction.Transaction)
	}

	if rf, ok := ret.Get(1).(func(transaction.Transaction) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *Repository) Update(_a0 transaction.Transaction) (transaction.Transaction, error) {
	ret := _m.Called(_a0)

	var r0 transaction.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(transaction.Transaction) (transaction.Transaction, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(transaction.Transaction) transaction.Transaction); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(transaction.Transaction)
	}

	if rf, ok := ret.Get(1).(func(transaction.Transaction) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
