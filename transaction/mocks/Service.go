// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	transaction "github.com/RianIhsan/raise-unity/transaction"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateTransaction provides a mock function with given fields: input
func (_m *Service) CreateTransaction(input transaction.CreateTransactionInput) (transaction.Transaction, error) {
	ret := _m.Called(input)

	var r0 transaction.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(transaction.CreateTransactionInput) (transaction.Transaction, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(transaction.CreateTransactionInput) transaction.Transaction); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(transaction.Transaction)
	}

	if rf, ok := ret.Get(1).(func(transaction.CreateTransactionInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionByCampaignID provides a mock function with given fields: input
func (_m *Service) GetTransactionByCampaignID(input transaction.GetCampaignTransactionInput) ([]transaction.Transaction, error) {
	ret := _m.Called(input)

	var r0 []transaction.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(transaction.GetCampaignTransactionInput) ([]transaction.Transaction, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(transaction.GetCampaignTransactionInput) []transaction.Transaction); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transaction.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(transaction.GetCampaignTransactionInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionByUserID provides a mock function with given fields: userID
func (_m *Service) GetTransactionByUserID(userID int) ([]transaction.Transaction, error) {
	ret := _m.Called(userID)

	var r0 []transaction.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]transaction.Transaction, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) []transaction.Transaction); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transaction.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProsesPayment provides a mock function with given fields: input
func (_m *Service) ProsesPayment(input transaction.TransactionNotifyInput) error {
	ret := _m.Called(input)

	var r0 error
	if rf, ok := ret.Get(0).(func(transaction.TransactionNotifyInput) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
